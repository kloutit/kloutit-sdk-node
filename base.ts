/* tslint:disable */
/* eslint-disable */
/**
 * Kloutit Clients API
 * Kloutit list of Client API calls
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 */
export enum KloutitEnvironment {
    development = 'development',
    production = 'production'
}

export enum KloutitOrganizationType {
    EDUCATION = 'EDUCATION',
    FASHION = 'FASHION',
    FOOD = 'FOOD',
    GAMING = 'GAMING',
    HEALTH_BEAUTY = 'HEALTH_BEAUTY',
    HOME = 'HOME',
    LEISURE = 'LEISURE',
    PHONE = 'PHONE',
    SOFTWARE = 'SOFTWARE',
    SPORT = 'SPORT',
    SUPPLY = 'SUPPLY',
    TECHNOLOGY = 'TECHNOLOGY',
    TRAVEL_AIRLINE = 'TRAVEL_AIRLINE',
    TRAVEL_HOTEL = 'TRAVEL_HOTEL'
}

export enum KloutitChargebackReason
{
    FRAUD = 'FRAUD',
    PRODUCT_SERVICE_NOT_RECEIVED = 'PRODUCT_SERVICE_NOT_RECEIVED',
    DEFECTIVE_PRODUCT_SERVICE = 'DEFECTIVE_PRODUCT_SERVICE',
    PRODUCT_SERVICE_NOT_AS_DESCRIBED = 'PRODUCT_SERVICE_NOT_AS_DESCRIBED',
    INCORRECT_DUPLICATED_CHARGES = 'INCORRECT_DUPLICATED_CHARGES',
    PRODUCT_SERVICE_CANCELLED = 'PRODUCT_SERVICE_CANCELLED',
    REFUND_NOT_RECEIVED = 'REFUND_NOT_RECEIVED',
    RECURRENT_OPERATION_CANCELLED = 'RECURRENT_OPERATION_CANCELLED'
}

export const Currencies = {
  // Europe
  EUR: 'EUR',
  GBP: 'GBP',
  CHF: 'CHF',
  NOK: 'NOK',
  DKK: 'DKK',
  SEK: 'SEK',
  BGN: 'BGN',
  HRK: 'HRK',
  CZK: 'CZK',
  HUF: 'HUF',
  PLN: 'PLN',
  RON: 'RON',
  ISK: 'ISK',
  RUB: 'RUB',
  MKD: 'MKD',
  RSD: 'RSD',
  // South America
  ARS: 'ARS',
  BOB: 'BOB',
  BRL: 'BRL',
  CLP: 'CLP',
  COP: 'COP',
  CRC: 'CRC',
  CUP: 'CUP',
  DOP: 'DOP',
  GTQ: 'GTQ',
  HNL: 'HNL',
  MXN: 'MXN',
  NIO: 'NIO',
  PAB: 'PAB',
  PYG: 'PYG',
  PEN: 'PEN',
  SRD: 'SRD',
  UYU: 'UYU',
  VES: 'VES',
  // North America
  USD: 'USD',
  CAD: 'CAD',
  // Asia
  CNY: 'CNY',
  JPY: 'JPY',
  INR: 'INR',
  KRW: 'KRW',
  IDR: 'IDR',
  MYR: 'MYR',
  PHP: 'PHP',
  SGD: 'SGD',
  THB: 'THB',
  VND: 'VND',
  HKD: 'HKD',
  TWD: 'TWD',
  TRY: 'TRY',
  // Oceania
  AUD: 'AUD',
  NZD: 'NZD',
  FJD: 'FJD',
  PGK: 'PGK',
  WST: 'WST',
  VUV: 'VUV'
} as const;
export type Currencies = typeof Currencies[keyof typeof Currencies];

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    protected basePath: string;

    constructor(environment: KloutitEnvironment = KloutitEnvironment.production,
    protected axios: AxiosInstance = globalAxios,
    configuration?: Configuration) {
        if(configuration?.basePath) {
            this.basePath = configuration.basePath;
        } else {
            this.basePath = this.getBasePath(environment);
        }
    }

    /**
     * Get the base path based on the environment.
     * @param environment The environment ('development' or 'production').
     * @returns The base path for the API.
     */
    private getBasePath(environment: KloutitEnvironment): string {
        const basePaths = {
            development:  'https://dev.clients-api.kloutit.com',
            production: 'https://clients-api.kloutit.com'
        };

        return basePaths[environment];
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
